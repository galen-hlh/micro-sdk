// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helper/helper.proto

package MicroProto_Helper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IdRequest struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdRequest) Reset()         { *m = IdRequest{} }
func (m *IdRequest) String() string { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()    {}
func (*IdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b0c20fee0eeba0e, []int{0}
}

func (m *IdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdRequest.Unmarshal(m, b)
}
func (m *IdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdRequest.Marshal(b, m, deterministic)
}
func (m *IdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdRequest.Merge(m, src)
}
func (m *IdRequest) XXX_Size() int {
	return xxx_messageInfo_IdRequest.Size(m)
}
func (m *IdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdRequest proto.InternalMessageInfo

func (m *IdRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type IdResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdResponse) Reset()         { *m = IdResponse{} }
func (m *IdResponse) String() string { return proto.CompactTextString(m) }
func (*IdResponse) ProtoMessage()    {}
func (*IdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b0c20fee0eeba0e, []int{1}
}

func (m *IdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdResponse.Unmarshal(m, b)
}
func (m *IdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdResponse.Marshal(b, m, deterministic)
}
func (m *IdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdResponse.Merge(m, src)
}
func (m *IdResponse) XXX_Size() int {
	return xxx_messageInfo_IdResponse.Size(m)
}
func (m *IdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IdResponse proto.InternalMessageInfo

func (m *IdResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*IdRequest)(nil), "MicroProto.Helper.IdRequest")
	proto.RegisterType((*IdResponse)(nil), "MicroProto.Helper.IdResponse")
}

func init() { proto.RegisterFile("helper/helper.proto", fileDescriptor_9b0c20fee0eeba0e) }

var fileDescriptor_9b0c20fee0eeba0e = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x48, 0xcd, 0x29,
	0x48, 0x2d, 0xd2, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x82, 0xbe, 0x99, 0xc9,
	0x45, 0xf9, 0x01, 0x20, 0xb6, 0x9e, 0x07, 0x58, 0x42, 0x49, 0x96, 0x8b, 0xd3, 0x33, 0x25, 0x28,
	0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x80, 0x8b, 0x39, 0xaf, 0x34, 0x57, 0x82, 0x51, 0x81,
	0x51, 0x83, 0x35, 0x08, 0xc4, 0x54, 0x52, 0xe1, 0xe2, 0x02, 0x49, 0x17, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0x80, 0x95, 0x30, 0x07, 0x41,
	0x79, 0x46, 0x31, 0x5c, 0x6c, 0x10, 0xe3, 0x84, 0x82, 0xb8, 0xf8, 0xdd, 0x53, 0x4b, 0x5c, 0x32,
	0x8b, 0x4b, 0x8a, 0x32, 0x93, 0x4a, 0x4b, 0x52, 0x3d, 0x53, 0x84, 0x64, 0xf4, 0x30, 0x6c, 0xd5,
	0x83, 0x5b, 0x29, 0x25, 0x8b, 0x43, 0x16, 0x62, 0xa3, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0xd8,
	0xf1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x26, 0x9b, 0x0e, 0xd3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelperClient is the client API for Helper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelperClient interface {
	GetDistributeId(ctx context.Context, opts ...grpc.CallOption) (Helper_GetDistributeIdClient, error)
}

type helperClient struct {
	cc *grpc.ClientConn
}

func NewHelperClient(cc *grpc.ClientConn) HelperClient {
	return &helperClient{cc}
}

func (c *helperClient) GetDistributeId(ctx context.Context, opts ...grpc.CallOption) (Helper_GetDistributeIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Helper_serviceDesc.Streams[0], "/MicroProto.Helper.Helper/GetDistributeId", opts...)
	if err != nil {
		return nil, err
	}
	x := &helperGetDistributeIdClient{stream}
	return x, nil
}

type Helper_GetDistributeIdClient interface {
	Send(*IdRequest) error
	Recv() (*IdResponse, error)
	grpc.ClientStream
}

type helperGetDistributeIdClient struct {
	grpc.ClientStream
}

func (x *helperGetDistributeIdClient) Send(m *IdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helperGetDistributeIdClient) Recv() (*IdResponse, error) {
	m := new(IdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelperServer is the server API for Helper service.
type HelperServer interface {
	GetDistributeId(Helper_GetDistributeIdServer) error
}

// UnimplementedHelperServer can be embedded to have forward compatible implementations.
type UnimplementedHelperServer struct {
}

func (*UnimplementedHelperServer) GetDistributeId(srv Helper_GetDistributeIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDistributeId not implemented")
}

func RegisterHelperServer(s *grpc.Server, srv HelperServer) {
	s.RegisterService(&_Helper_serviceDesc, srv)
}

func _Helper_GetDistributeId_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelperServer).GetDistributeId(&helperGetDistributeIdServer{stream})
}

type Helper_GetDistributeIdServer interface {
	Send(*IdResponse) error
	Recv() (*IdRequest, error)
	grpc.ServerStream
}

type helperGetDistributeIdServer struct {
	grpc.ServerStream
}

func (x *helperGetDistributeIdServer) Send(m *IdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helperGetDistributeIdServer) Recv() (*IdRequest, error) {
	m := new(IdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Helper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MicroProto.Helper.Helper",
	HandlerType: (*HelperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDistributeId",
			Handler:       _Helper_GetDistributeId_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helper/helper.proto",
}
