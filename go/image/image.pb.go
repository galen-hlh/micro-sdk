// Code generated by protoc-gen-go. DO NOT EDIT.
// source: image/image.proto

package image

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadFileRequest struct {
	File                 []byte   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileType             uint32   `protobuf:"varint,3,opt,name=fileType,proto3" json:"fileType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileRequest) Reset()         { *m = UploadFileRequest{} }
func (m *UploadFileRequest) String() string { return proto.CompactTextString(m) }
func (*UploadFileRequest) ProtoMessage()    {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38227ccc039bf6ae, []int{0}
}

func (m *UploadFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileRequest.Unmarshal(m, b)
}
func (m *UploadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileRequest.Marshal(b, m, deterministic)
}
func (m *UploadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequest.Merge(m, src)
}
func (m *UploadFileRequest) XXX_Size() int {
	return xxx_messageInfo_UploadFileRequest.Size(m)
}
func (m *UploadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequest proto.InternalMessageInfo

func (m *UploadFileRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadFileRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadFileRequest) GetFileType() uint32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

type UploadFileResponse struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	FilePath             string   `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileResponse) Reset()         { *m = UploadFileResponse{} }
func (m *UploadFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadFileResponse) ProtoMessage()    {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_38227ccc039bf6ae, []int{1}
}

func (m *UploadFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileResponse.Unmarshal(m, b)
}
func (m *UploadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileResponse.Marshal(b, m, deterministic)
}
func (m *UploadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResponse.Merge(m, src)
}
func (m *UploadFileResponse) XXX_Size() int {
	return xxx_messageInfo_UploadFileResponse.Size(m)
}
func (m *UploadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResponse proto.InternalMessageInfo

func (m *UploadFileResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadFileResponse) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadFileRequest)(nil), "image.UploadFileRequest")
	proto.RegisterType((*UploadFileResponse)(nil), "image.UploadFileResponse")
}

func init() { proto.RegisterFile("image/image.proto", fileDescriptor_38227ccc039bf6ae) }

var fileDescriptor_38227ccc039bf6ae = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xcc, 0x4d, 0x4c,
	0x4f, 0xd5, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x52, 0x3c,
	0x97, 0x60, 0x68, 0x41, 0x4e, 0x7e, 0x62, 0x8a, 0x5b, 0x66, 0x4e, 0x6a, 0x50, 0x6a, 0x61, 0x69,
	0x6a, 0x71, 0x89, 0x90, 0x10, 0x17, 0x4b, 0x5a, 0x66, 0x4e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x4f, 0x10, 0x98, 0x2d, 0x24, 0xc5, 0xc5, 0x01, 0xa2, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x98, 0x14,
	0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x98, 0x5c, 0x48, 0x65, 0x41, 0xaa, 0x04, 0xb3, 0x02, 0xa3,
	0x06, 0x6f, 0x10, 0x9c, 0xaf, 0xe4, 0xc2, 0x25, 0x84, 0x6c, 0x41, 0x71, 0x41, 0x7e, 0x5e, 0x71,
	0x2a, 0xc8, 0x86, 0xe4, 0xfc, 0x14, 0x88, 0x0d, 0xbc, 0x41, 0x60, 0x36, 0xcc, 0x94, 0x80, 0xc4,
	0x92, 0x0c, 0x64, 0x1b, 0x40, 0x7c, 0x23, 0x3f, 0x2e, 0x56, 0x4f, 0x90, 0x7b, 0x85, 0x5c, 0xb9,
	0xb8, 0x10, 0xc6, 0x09, 0x49, 0xe8, 0x41, 0xbc, 0x84, 0xe1, 0x05, 0x29, 0x49, 0x2c, 0x32, 0x10,
	0xbb, 0x35, 0x18, 0x0d, 0x18, 0x9d, 0x84, 0x4f, 0x31, 0x09, 0xf8, 0x66, 0x26, 0x17, 0xe5, 0x07,
	0x80, 0x02, 0x23, 0x06, 0x6c, 0x76, 0x12, 0x1b, 0x38, 0x64, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x53, 0x71, 0x4b, 0x2e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Image_UploadFileClient, error)
}

type imageClient struct {
	cc *grpc.ClientConn
}

func NewImageClient(cc *grpc.ClientConn) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Image_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Image_serviceDesc.Streams[0], "/image.Image/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUploadFileClient{stream}
	return x, nil
}

type Image_UploadFileClient interface {
	Send(*UploadFileRequest) error
	Recv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type imageUploadFileClient struct {
	grpc.ClientStream
}

func (x *imageUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUploadFileClient) Recv() (*UploadFileResponse, error) {
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServer is the server API for Image service.
type ImageServer interface {
	UploadFile(Image_UploadFileServer) error
}

// UnimplementedImageServer can be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (*UnimplementedImageServer) UploadFile(srv Image_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterImageServer(s *grpc.Server, srv ImageServer) {
	s.RegisterService(&_Image_serviceDesc, srv)
}

func _Image_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServer).UploadFile(&imageUploadFileServer{stream})
}

type Image_UploadFileServer interface {
	Send(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type imageUploadFileServer struct {
	grpc.ServerStream
}

func (x *imageUploadFileServer) Send(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Image_serviceDesc = grpc.ServiceDesc{
	ServiceName: "image.Image",
	HandlerType: (*ImageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Image_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "image/image.proto",
}
